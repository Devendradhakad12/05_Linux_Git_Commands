
What is git - Free & Open Source Version Control System, in simple words tool that help to trackes changes in code
what is github - Website where we host repositories online
pull request - its lets you tell other about changes you've pushed to a branch in a repository on github

ğŸš€ git --version ğŸ‘‰ check version 

ğŸš€ git config --global user.name "Devendra Dhakad"   ğŸ‘‰ set name

ğŸš€ git config --global user.email "devendradhakad745@gmail.com" ğŸ‘‰ set email id

ğŸš€ git config user.name ğŸ‘‰ Check user name

ğŸš€ git config user.email ğŸ‘‰ Check email id

ğŸš€ git config --global --edit ğŸ‘‰ edit username or email

ğŸ’¡Create file and folder and push on github Commands -------------------------------------------------------

ğŸš€ mkdir <dir name>  ğŸ‘‰ make a new folder

ğŸš€ cd <dir name> ğŸ‘‰ change floder

ğŸš€ cd .. ğŸ‘‰ switch preivious folder

ğŸš€ cd ../.. ğŸ‘‰ switch preivious 2 folder

ğŸš€ pwd ğŸ‘‰ print working diractory (where am i)

ğŸš€ git init ğŸ‘‰ used to create a new git repo , initialize folder and create repo

ğŸš€ ls ğŸ‘‰ list files (Show my files) 

ğŸš€ ls -a ğŸ‘‰  .git is created in it trough which you know that it contains file which is being tracking by git

ğŸš€ git status ğŸ‘‰ it show you chnages of repo, display the state of the code

ğŸš€ git add <file name> ğŸ‘‰ add new or changed file in working directiry to the git staging area

ğŸš€ git add . ğŸ‘‰ track all file (file come in staging area)

ğŸš€ git commit -m "message of commit" ğŸ‘‰ it is the record of change , commit file

ğŸš€ git remote add origin <link> ğŸ‘‰ add github repo

ğŸš€ git remote -v ğŸ‘‰ verify remote

ğŸš€ git branch ğŸ‘‰ checkout branches

ğŸš€ git branch -M main ğŸ‘‰ reaname branch

ğŸš€ git push origin main ğŸ‘‰ upload local repo content to remote repo

ğŸš€ git push -u origin main ğŸ‘‰ set push origin

ğŸš€ git push ğŸ‘‰  push in main origin

ğŸš€ git log ğŸ‘‰ check no. of previous commits



ğŸ’¡ Branch crete commands-----------------------------------------------------------------------------------

ğŸš€ git branch ğŸ‘‰ checkout branches

ğŸš€ git branch -M main ğŸ‘‰ reaname branch

ğŸš€ git checkout <commit hash code/branch name> ğŸ‘‰ to navigate,  you can discard all the changes

ğŸš€ git checkout -b <new branch_name> ğŸ‘‰ create branch

ğŸš€ git branch -d <branch_name> ğŸ‘‰ delete branch

ğŸš€ git branch <new branch_name> ğŸ‘‰ create branch
   exp.  git branch dev

ğŸš€ git checkout <branch_name> ğŸ‘‰ switch in branch_name branch
      
ğŸš€ git checkout -b <branch name> ğŸ‘‰ create and switch new branch
   exp. git checkout dev/newfeature

ğŸš€ git diff <branch name> ğŸ‘‰ compare commits,branches,file & more

ğŸš€ git merge <branch name> ğŸ‘‰ when feature is complete then merege all branches in master branch
    exp.i'm in dev --  git merge dev/newfeature
    exp.i'm in master -- git merge dev

ğŸš€ git clone <repo_link> ğŸ‘‰ cloning a repository on our local machine

ğŸš€ vim <file name> ğŸ‘‰ open file inn git bash and click on i for editing

ğŸš€ cat <file name> ğŸ‘‰ check edits and changes in file
 

ğŸ’¡ Flags ----------------------------------------------------------
  
  Flags - Flags are characters that we pass with commands to moify their behaviour

  manual Commands 
  man ls - give info about is command
  man mkdir - give info about mkdir command 

 ğŸš€ With Flags
   ls -l
   ls -a 


ğŸ’¡ Touch Command ----------------------------------------------
   Used to create files

   ğŸš€touch index.html
   ğŸš€touch app.js
   ğŸš€touch style.css

ğŸ’¡ Delete Command ----------------------------------------------
   Used to delete files and folder

   ğŸš€rm index.html  ğŸ‘‰ remove files
   ğŸš€rmdir   ğŸ‘‰ removes empty folder
   ğŸš€rm -rf ğŸ‘‰ removes any folder   (recursive force)
    



ğŸ’¡ Common Commands ---------------------------------------------------
  These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone     Clone a repository into a new directory
   init      Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add       Add file contents to the index
   mv        Move or rename a file, a directory, or a symlink
   restore   Restore working tree files
   rm        Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect    Use binary search to find the commit that introduced a bug
   diff      Show changes between commits, commit and working tree, etc
   grep      Print lines matching a pattern
   log       Show commit logs
   show      Show various types of objects
   status    Show the working tree status

grow, mark and tweak your common history
   branch    List, create, or delete branches
   commit    Record changes to the repository
   merge     Join two or more development histories together
   rebase    Reapply commits on top of another base tip
   reset     Reset current HEAD to the specified state
   switch    Switch branches
   tag       Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch     Download objects and refs from another repository
   pull      Fetch from and integrate with another repository or a local branch
   push      Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.
